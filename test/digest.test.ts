import { describe, it } from 'bun:test';
import assert from 'assert';
import {
  keccak256,
  encodeAbiParameters,
  encodePacked,
  type Address,
  parseAbiParameters,
  hashTypedData,
} from 'viem';
import {
  calculateSafeEIP712Hash,
  generateSafeTypedData,
} from '../src/lib/safe-transaction';
import type { SafeTransactionData } from '../src/types';
import { OperationType } from '../src/types';

const ZERO = '0x0000000000000000000000000000000000000000' as Address;
const MULTISEND = '0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526' as Address;
const SAFE = '0x48256Ff9b97674B13a81a8857a036C2A6cB4010f' as Address;

const txData: SafeTransactionData = {
  to: MULTISEND,
  value: '0x00',
  data: '0x8d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000007c40048256ff9b97674b13a81a8857a036c2a6cb4010f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024610b59250000000000000000000000001395ff4bc72cb895d2959796fc49cd6f2a5d20bd0048256ff9b97674b13a81a8857a036c2a6cb4010f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4957ed2b30000000000000000000000001395ff4bc72cb895d2959796fc49cd6f2a5d20bd000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001e48a71565941a0cd05d6313280079b76544ccdee6e7746de8e78962e2e95acd4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010048256ff9b97674b13a81a8857a036c2a6cb4010f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000440c6c76b8e48a71565941a0cd05d6313280079b76544ccdee6e7746de8e78962e2e95acd40000000000000000000000008bab6d1b75f19e9ed9fce8b9bd338844ff79ae270048256ff9b97674b13a81a8857a036c2a6cb4010f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005247508dd98e48a71565941a0cd05d6313280079b76544ccdee6e7746de8e78962e2e95acd40000000000000000000000008bab6d1b75f19e9ed9fce8b9bd338844ff79ae277508dd980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003adfa9b19235d93111d863b5f7e4508b32fdf915b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000002307800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
  operation: OperationType.DelegateCall,
  safeTxGas: 0n,
  baseGas: 0n,
  gasPrice: 0n,
  gasToken: ZERO,
  refundReceiver: ZERO,
  nonce: 0n,
} as SafeTransactionData;

const args = {
  safeAddress: SAFE,
  safeVersion: '1.4.1',
  chainId: 84532,
  data: txData,
} as const;

describe('Digest', () => {
  it('manual vs hashTypedData', () => {
    const DOMAIN_SEPARATOR_TYPEHASH = keccak256(
      encodePacked(
        ['string'],
        ['EIP712Domain(uint256 chainId,address verifyingContract)']
      )
    );

    const domainSeparator = keccak256(
      encodeAbiParameters(parseAbiParameters('bytes32, uint256, address'), [
        DOMAIN_SEPARATOR_TYPEHASH,
        BigInt(args.chainId),
        args.safeAddress,
      ])
    );

    const SAFE_TX_TYPEHASH = keccak256(
      encodePacked(
        ['string'],
        [
          'SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)',
        ]
      )
    );

    const dataHash = keccak256(txData.data);
    const encodedParams = encodeAbiParameters(
      parseAbiParameters(
        'bytes32 safeTxTypeHash,address to,uint256 value,bytes32 dataHash,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce'
      ),
      [
        SAFE_TX_TYPEHASH,
        txData.to,
        BigInt(txData.value),
        dataHash,
        txData.operation,
        txData.safeTxGas,
        txData.baseGas,
        txData.gasPrice,
        txData.gasToken,
        txData.refundReceiver,
        txData.nonce,
      ]
    );

    const structHash = keccak256(encodedParams);

    const digest = hashTypedData(
      generateSafeTypedData({
        safeAddress: args.safeAddress as Address,
        safeVersion: args.safeVersion,
        chainId: args.chainId,
        data: args.data,
      })
    );

    const helperDigest = calculateSafeEIP712Hash(args);

    assert.equal(
      DOMAIN_SEPARATOR_TYPEHASH,
      '0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218',
      'DOMAIN_SEPARATOR_TYPEHASH'
    );
    assert.equal(
      domainSeparator,
      '0xcf46f1f6b6f1a1abe2e43eb14a459c168ba7d99993e71f72eee48363ac3deb61',
      'domainSeparator'
    );
    assert.equal(
      dataHash,
      '0xa475bd4aeabab9984fed93ea94220e5b67b26b741582bc6242d64f4a6ddaf11a',
      'dataHash'
    );
    assert.equal(
      structHash,
      '0xf4c78156ae327ad1b2f7ae27f5269e460eded01a3f54374b35c76ff4da499a51',
      'structHash'
    );
    assert.equal(
      digest,
      '0xd562bf6a82f44e6795aae96c191af5ba94bb967df01f9df925bf4d066b8ecc5c',
      'digest'
    );
    assert.equal(
      helperDigest,
      '0xd562bf6a82f44e6795aae96c191af5ba94bb967df01f9df925bf4d066b8ecc5c',
      'calculateSafeEIP712Hash'
    );
  });
});
